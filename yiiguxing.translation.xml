<application>
  <component name="AppStorage">
    <histories>
      <item value="Filter 'customAuthFilter' configured for use" />
      <item value="cyan" />
      <item value="equipment" />
      <item value="diabets" />
      <item value="You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '2 limit 10' at line 1" />
      <item value="Paging query needs to have a Pageable parameter" />
      <item value="Creates a new {@link PageRequest}. Pages are zero indexed, thus providing 0 for {@code page} will return the first page." />
      <item value="Defines that data can be lazily fetched" />
      <item value="the length of time to sleep in milliseconds" />
      <item value="millis" />
      <item value="Causes the current thread to wait until another thread invokes the {@link java.lang.Object#notify()} method or the {@link java.lang.Object#notifyAll()} method for this object. In other words, this method behaves exactly as if it simply performs the call {@code wait(0)}." />
      <item value="Credentials" />
      <item value="Authentication" />
      <item value="Constructs an AuthenticationCredentialsNotFoundException with the specified message." />
      <item value="Authentication Credentials Not Found Exception" />
      <item value="if there is a value present" />
      <item value="HTTP BAD REQUEST" />
      <item value="HTTP UNSUPPORTED TYPE" />
      <item value="HTTP REQ TOO LONG" />
      <item value="HTTP ENTITY TOO LARGE" />
      <item value="HTTP PRECON FAILED" />
      <item value="HTTP CONFLICT" />
      <item value="HTTP CLIENT TIMEOUT" />
      <item value="HTTP NOT ACCEPTABLE" />
      <item value="HTTP BAD METHOD" />
      <item value="HTTP PAYMENT REQUIRED" />
      <item value="HTTP FORBIDDEN" />
      <item value="HTTP LENGTH REQUIRED" />
      <item value="GONE" />
      <item value="shallow" />
      <item value="Batch" />
      <item value="Transforms from the source object." />
      <item value="instance with specified type copying from source data; or null if source data is null" />
      <item value="Transforms from the source object. (copy same properties only)" />
      <item value="Copy the property values of the given source bean into the given target bean, ignoring the given &quot;ignoreProperties&quot;." />
      <item value="The source and target classes do not have to match or even be derived from each other" />
      <item value="Copy the property values of the given source bean into the given target bean" />
      <item value="This method does NOT ensure that the {@link UserDetailsService} is available for the {@link #getDefaultUserDetailsService()} method." />
      <item value="Provider" />
      <item value="Add authentication based upon the custom {@link AuthenticationProvider} that is passed in. Since the {@link AuthenticationProvider} implementation is unknown, all customizations must be done externally and the {@link AuthenticationManagerBuilder} is returned immediately" />
      <item value="Add LDAP authentication to the {@link AuthenticationManagerBuilder} and return a {@link LdapAuthenticationProviderConfigurer} to allow customization of the LDAP authentication" />
      <item value="Add authentication based upon the custom {@link AuthenticationProvider} that is passed in" />
      <item value="Note that additional {@link UserDetailsService}'s may override this {@link UserDetailsService} as the default." />
      <item value="This method also ensure that the {@link UserDetailsService} is available for the {@link #getDefaultUserDetailsService()} method" />
      <item value="It then returns a {@link DaoAuthenticationConfigurer} to allow customization of the authentication" />
      <item value="Add authentication based upon the custom {@link UserDetailsService} that is passed in" />
      <item value="This method also ensure that the {@link UserDetailsService} is available for the {@link #getDefaultUserDetailsService()} method. Note that additional {@link UserDetailsService}'s may override this {@link UserDetailsService} as the default." />
      <item value="Add authentication based upon the custom {@link UserDetailsService} that is passed in. It then returns a {@link DaoAuthenticationConfigurer} to allow customization of the authentication." />
      <item value="Allows adding {@link RequestMatcher} instances that Spring Security should ignore. Web Security provided by Spring Security (including the {@link SecurityContext}) will not be available on {@link HttpServletRequest} that match. Typically the requests that are registered should be that of only static resources. For requests that are dynamic, consider mapping the request to allow all users instead." />
      <item value="Assert not equal" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="390" />
        <entry key="ENGLISH" value="391" />
        <entry key="ROMANIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="primaryLanguage" value="CHINESE_TRADITIONAL" />
      </app-key>
    </option>
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="CHINESE" />
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="^ +\*|(&lt;\/?a.*?&gt;)|[&lt;][\w/]+[&gt;]|(\/\*\*|\*\/)|(?&lt;=(\n|\t)) +\*+|\/$" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="primaryLanguage" value="CHINESE" />
      </youdao-translate>
    </option>
  </component>
</application>