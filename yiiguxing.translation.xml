<application>
  <component name="AppStorage">
    <histories>
      <item value="Delimiter" />
      <item value="Cache lock annotation" />
      <item value="Custom serializer for Page object" />
      <item value="Controller advice for comment result." />
      <item value="advice" />
      <item value="do Filter Internal" />
      <item value="parameter" />
      <item value="filter Chain" />
      <item value="do Authenticate" />
      <item value="is Present" />
      <item value="Present" />
      <item value="UNAUTHORIZED" />
      <item value="Media Type" />
      <item value="development" />
      <item value="Sets custom object mapper" />
      <item value="Gets exclude url patterns" />
      <item value="should Not Filter" />
      <item value="exclude Url Patterns" />
      <item value="Authenticate" />
      <item value="Calls when a user has been unsuccessfully authenticated" />
      <item value="Authentication failure handler" />
      <item value="Option" />
      <item value="Filter base class that aims to guarantee a single execution per request * dispatch, on any servlet container. It provides a {@link #doFilterInternal} * method with HttpServletRequest and HttpServletResponse arguments" />
      <item value="Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License." />
      <item value="a list of security schemes" />
      <item value="The configuration of which operations have associated SecuritySchemes is configured with" />
      <item value="Configures the global com.wordnik.swagger.model.SecurityScheme's applicable to all or some of the api * operations." />
      <item value="A builder which is intended to be the primary interface into the swagger-springmvc framework. * Provides sensible defaults and convenience methods for configuration." />
      <item value="Authentication" />
      <item value="Production" />
      <item value="Doc api disabled" />
      <item value="disabled" />
      <item value="global" />
      <item value="content" />
      <item value="Api authentication Filter" />
      <item value="Access" />
      <item value="the Authentication or null if authentication information is unavailable" />
      <item value="Gets the currently authenticated principal" />
      <item value="Authenticat" />
      <item value="To ensure compatibility, wrapping your layout in LayoutWrappingEncoder." />
      <item value="This appender no longer admits a layout as a sub-component, set an encoder instead." />
      <item value="Expire" />
      <item value="Forbidden Exception" />
      <item value="Holder" />
      <item value="Error resolving template [api/admin/login], template might not exist or might not be accessible by any of the configured Template Resolvers" />
      <item value="Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [api/admin/login], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause" />
      <item value="Filter Registration Bean" />
      <item value="Consider defining a bean of type" />
      <item value="'delete(K)' in 'com.yunnengtian.allsky.cache.CacheStore' clashes with 'delete(Object)' in 'com.yunnengtian.allsky.cache.AbstractCacheStore'; both methods have same erasure, yet neither overrides the other" />
      <item value="No beans of 'StringCacheStore' type found." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="318" />
        <entry key="ENGLISH" value="319" />
        <entry key="ROMANIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>