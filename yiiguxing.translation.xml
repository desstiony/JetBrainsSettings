<application>
  <component name="AppStorage">
    <histories>
      <item value="Check if the current context has authenticated or not." />
      <item value="Changes the currently authenticated principal, or removes the authentication information." />
      <item value="Gets the currently authenticated principal." />
      <item value="Pluralize the times label format" />
      <item value="mismatch Tip" />
      <item value="Tip" />
      <item value="mismatch" />
      <item value="Plain text must not be blank" />
      <item value="FORBIDDEN" />
      <item value="Forbidden Exception" />
      <item value="must Not Expire" />
      <item value="Get some statistics about the count of posts, the count of comments, etc" />
      <item value="count" />
      <item value="environments" />
      <item value="Authenticates" />
      <item value="If the specified id does not exist" />
      <item value="Fetch" />
      <item value="Gets actual generic type" />
      <item value="Gets actual generic type." />
      <item value="Abstract service implementation" />
      <item value="Use {@code @NonNullApi} (scope = parameters + return values) and/or {@code @NonNullFields} * (scope = fields) to set the default behavior to non-nullable in order to avoid annotating * your whole codebase with {@code @NonNull}." />
      <item value="Should be used at parameter, return value, and field level. Method overrides should * repeat parent {@code @NonNull} annotations unless they behave differently." />
      <item value="A common Spring annotation to declare that annotated elements cannot be {@code null}. * Leverages JSR 305 meta-annotations to indicate nullability in Java to common tools with * JSR 305 support and used by Kotlin to infer nullability of Spring API." />
      <item value="cause" />
      <item value="Gets random uuid without dash" />
      <item value="desensitize" />
      <item value="Expired" />
      <item value="authenticate" />
      <item value="expire Time" />
      <item value="avatar" />
      <item value="org.springframework.orm.jpa.JpaSystemException: could not execute statement; nested exception is org.hibernate.exception.GenericJDBCException: could not execute statement" />
      <item value="Incorrect string value: '\xE5\x90\x88\xE8\x82\xA5' for column 'address' at row 1" />
      <item value="Request processing failed;" />
      <item value="INFO" />
      <item value="FAIL ON EMPTY BEANS" />
      <item value="through reference chain" />
      <item value="No constructor found" />
      <item value="touchstart touchmove touchend" />
      <item value="joy" />
      <item value="Constructor lookup" />
      <item value="he following code may not be strictly correct under // the current Java memory model." />
      <item value="Note that this method propagates any exception thrown by the * nullary constructor" />
      <item value="The class is initialized if it * has not already been initialized." />
      <item value="The class is instantiated as if by a {@code new} * expression with an empty argument list" />
      <item value="Creates a new instance of the class represented by this {@code Class} * object." />
      <item value="Returns the index within this string of the first occurrence of the * specified substring." />
      <item value="Attachment entity" />
      <item value="Converter interface for input DTO" />
      <item value="You have to login before accessing admin api" />
      <item value="Exception caused by bad request." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="245" />
        <entry key="ENGLISH" value="246" />
        <entry key="ROMANIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>